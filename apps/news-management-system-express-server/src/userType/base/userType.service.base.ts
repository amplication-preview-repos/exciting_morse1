/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserType as PrismaUserType } from "@prisma/client";

export class UserTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserTypeCountArgs, "select">): Promise<number> {
    return this.prisma.userType.count(args);
  }

  async userTypes(
    args: Prisma.UserTypeFindManyArgs
  ): Promise<PrismaUserType[]> {
    return this.prisma.userType.findMany(args);
  }
  async userType(
    args: Prisma.UserTypeFindUniqueArgs
  ): Promise<PrismaUserType | null> {
    return this.prisma.userType.findUnique(args);
  }
  async createUserType(
    args: Prisma.UserTypeCreateArgs
  ): Promise<PrismaUserType> {
    return this.prisma.userType.create(args);
  }
  async updateUserType(
    args: Prisma.UserTypeUpdateArgs
  ): Promise<PrismaUserType> {
    return this.prisma.userType.update(args);
  }
  async deleteUserType(
    args: Prisma.UserTypeDeleteArgs
  ): Promise<PrismaUserType> {
    return this.prisma.userType.delete(args);
  }
}
